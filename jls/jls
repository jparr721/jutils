#!/usr/bin/env python3

import argparse
from pathlib import Path
import pwd
import grp
import time
import math
from dataclasses import dataclass
from typing import List
import re


class Colors:
    BLACK = "\033[90m"
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    RESET = "\033[0m"

    def len():
        return len(Colors.RED) + len(Colors.RESET)

    def colorize(string: str, color: str):
        return f"{color}{string}{Colors.RESET}"


def strip_escape_codes(text: str) -> str:
    escape_code_pattern = re.compile(r"\x1b\[[0-9;]*m")
    return escape_code_pattern.sub("", text)


@dataclass
class FileInfo:
    name: str
    owner: str
    group: str
    last_modified: str
    nlink: str
    mode: str
    size: str

    @property
    def ignored(self) -> bool:
        return self.name.startswith(".")

    def group_sizes(self) -> List[int]:
        return [
            10,
            len(self.nlink),
            len(self.owner),
            len(self.group),
            len(self.size),
            len(self.last_modified),
            1,
        ]

    def to_output(self, complete=False, spaces=[]) -> str:
        if complete:
            if len(spaces) < 7:
                raise ValueError("Invalid spaces", spaces)
            return " ".join(
                [
                    f"{self.mode:<{spaces[0]}}",
                    f"{self.nlink:>{spaces[1]}}",
                    f"{self.owner:<{spaces[2]}}",
                    f"{self.group:<{spaces[3]}}",
                    f"{self.size:<{spaces[4]}}",
                    self.last_modified,
                    self.name,
                ]
            )
        return self.name


def mode_to_string(is_dir: bool, mode: int):
    s = (
        Colors.colorize("d", Colors.MAGENTA)
        if is_dir
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("r", Colors.YELLOW)
        if mode & 0o400 == 0o400
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("w", Colors.RED)
        if mode & 0o200 == 0o200
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("x", Colors.GREEN)
        if mode & 0o100 == 0o100
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("r", Colors.YELLOW)
        if mode & 0o040 == 0o040
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("w", Colors.RED)
        if mode & 0o020 == 0o020
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("x", Colors.GREEN)
        if mode & 0o010 == 0o010
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("r", Colors.YELLOW)
        if mode & 0o004 == 0o004
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("w", Colors.RED)
        if mode & 0o002 == 0o002
        else Colors.colorize("-", Colors.BLACK)
    )
    s += (
        Colors.colorize("x", Colors.GREEN)
        if mode & 0o001 == 0o001
        else Colors.colorize("-", Colors.BLACK)
    )
    return s


def size_human_readable(size: int) -> str:
    SIZES = ["", "K", "M", "G", "T", "P"]
    if size == 0:
        return Colors.colorize("0", Colors.GREEN)

    mag = int(math.log(size, 1024))
    adjusted = size / (1 << mag * 10)

    if mag > len(SIZES) or mag == 0:
        return Colors.colorize(f"{adjusted:.1f}", Colors.GREEN)
    if mag > 2:
        return Colors.colorize(f"{adjusted:.1f}{SIZES[mag]}", Colors.RED)
    else:
        return Colors.colorize(f"{adjusted:.1f}{SIZES[mag]}", Colors.YELLOW)


def colorize_path(path: Path, as_list=False):
    if path.is_dir():
        return Colors.colorize(path.name, Colors.RED)
    elif path.is_symlink():
        if not as_list:
            return Colors.colorize(f"{path.name}", Colors.MAGENTA)
        else:
            return Colors.colorize(f"{path.name} -> {path.readlink()}", Colors.MAGENTA)
    return Colors.colorize(path.name, Colors.CYAN)


def get_file_info(path: Path, human_readable_size=False, as_list=False):
    stats = path.stat() if not path.is_symlink() else path.lstat()
    owner = pwd.getpwuid(stats.st_uid).pw_name
    group = grp.getgrgid(stats.st_gid).gr_name
    last_modified = time.strftime("%b %d %H:%M", time.localtime(stats.st_mtime))
    return FileInfo(
        colorize_path(path),
        Colors.colorize(str(owner), Colors.YELLOW),
        Colors.colorize(str(group), Colors.YELLOW),
        Colors.colorize(last_modified, Colors.BLUE),
        Colors.colorize(str(stats.st_nlink), Colors.BLUE),
        mode_to_string(path.is_dir(), stats.st_mode),
        Colors.colorize(str(stats.st_size), Colors.GREEN)
        if not human_readable_size
        else size_human_readable(stats.st_size),
    )


def format_for_terminal(ret: List[str]):
    return " ".join(ret)


def get_first_alnum(name: str):
    for i, c in enumerate(name):
        if c.isalnum():
            return name[i:].lower()
    else:
        return name


def do_ls(args):
    directory = Path(args.directory)
    files = directory.iterdir()

    files = sorted(files, key=lambda x: get_first_alnum(x.name))

    ret = []
    sizes = []
    for file in files:
        info = get_file_info(file, args.human_readable, args.list)
        if info.ignored and not args.all:
            continue

        ret.append(info)
        sizes.append(info.group_sizes())

    group_sizes = [max(c) for c in zip(*sizes)]
    ret = [info.to_output(args.list, group_sizes) for info in ret]

    if args.list:
        return "\n".join(ret)
    return format_for_terminal(ret)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        add_help=False,
        description="List information about the FILEs (the current directory by default)",
    )
    parser.add_argument(
        "--help",
        default=argparse.SUPPRESS,
        action="help",
        help="show this help message and exit",
    )
    parser.add_argument("directory", default=".", nargs="?")
    parser.add_argument(
        "-a", "--all", action="store_true", help="do not ignore entries starting with ."
    )
    parser.add_argument(
        "-l", "--list", action="store_true", help="use a long listing format"
    )
    parser.add_argument(
        "-h",
        "--human-readable",
        action="store_true",
        help="with -l, print sizes like 1K 234M 2G etc",
    )
    args = parser.parse_args()

    print(do_ls(args))
