#!/usr/bin/env python3

import argparse
import re
import os
from pathlib import Path
from typing import List
import fnmatch


class Colors:
    BLACK = "\033[90m"
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    MAGENTA = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    RESET = "\033[0m"

    def colorize(string: str, color: str):
        return f"{color}{string}{Colors.RESET}"


class Gitignore:
    """
    Semi-standards compliant gitignore parser based on:
    https://git-scm.com/docs/gitignore#_pattern_format
    """

    def __init__(self, path: Path):
        if not isinstance(path, Path):
            raise ValueError(f"Input path must be of type Path, got '{type(path)}'")
        if path.is_file():
            self.path = path.parent / ".gitignore"
        else:
            self.path = path / ".gitignore"

        self.patterns = []
        self.negation_patterns = []

    def build(self):
        with open(self.path, "r") as f:
            lines = f.readlines()
            for line in lines:
                # This blows away the case where (\ ) is in the file :shrug:.
                line = line.strip()
                if not line or line.startswith("#"):
                    continue

                if line.startswith("!"):
                    self.negation_patterns.append(line[1:])
                else:
                    self.patterns.append(line)

    def match(self, path: Path | str):
        # It's much easier to match over strings
        if isinstance(path, Path):
            path = str(path)

        matched = False
        for pattern in self.patterns:
            if self._pattern_match(path, pattern):
                matched = True

                # Short-circuit the return since we've already got a match.
                break

        for pattern in self.negation_patterns:
            if self._pattern_match(path, pattern):
                matched = False

                # Short-circuit the return since we've already got a match.
                break

        return matched

    def _pattern_match(self, path: str, pattern: str):
        if pattern.startswith("/"):
            pattern = pattern[1:]
            return fnmatch.fnmatch(path, pattern)

        if "**" in pattern:
            parts = pattern.split("**")
            left = parts[0]
            right = parts[1]
            if fnmatch.fnmatch(path, f"{left}*{right}"):
                if "target" in path:
                    return True
        return fnmatch.fnmatch(path, pattern) or fnmatch.fnmatch(
            os.path.basename(path), pattern
        )


def highlight_match(text: str, pattern, color):
    if match := re.search(pattern, text):
        start, end = match.span()
        highlighted = (
            text[:start] + Colors.colorize(text[start:end], color) + text[end:]
        )
        return highlighted

    # Otherwise return the raw text back
    return None


def find_in_directory(path: Path, args):
    if args.full_path:
        # Resolve the full path from root.
        path = path.resolve()

    gitignore = Gitignore(path)
    if args.ignore_gitignore:
        gitignore.build()

    # fnmatch is a little nicer to use, but regex gives us position information,
    # we we just convert on the fly here once.
    query_pattern = fnmatch.translate(args.query)

    def recursive_walk(from_path: Path, depth: int, results: List[Path]):
        if depth > args.depth:
            return

        dirs = []
        files = []
        for entry in os.listdir(from_path):
            if not args.show_hidden:
                if entry.startswith("."):
                    continue
            fullpath = from_path / entry
            if args.ignore_gitignore and gitignore.match(fullpath):
                continue

            # I want these to be separate for better visual clarity.
            if fullpath.is_dir():
                dirs.append(fullpath)
            else:
                files.append(fullpath)

        for file in files:
            if res := highlight_match(
                file.name,
                query_pattern,
                Colors.RED,
            ):
                results.append(os.path.join(from_path, res) + "\n")

        for dir in dirs:
            if res := highlight_match(
                dir.name,
                query_pattern,
                Colors.BLUE,
            ):
                results.append(os.path.join(from_path, res) + "\n")
            recursive_walk(dir, depth + 1, results)

        return results

    results = []
    recursive_walk(path, 1, results)
    return results


def find_in_file(path: Path, args):
    query_pattern = fnmatch.translate(args.query)
    results = []
    with open(path, "r") as f:
        for ii, line in enumerate(f.readlines()):
            if m := highlight_match(line, query_pattern):
                results.append(f"{ii}:{m.strip()}")
    return results


def find(args):
    in_path = Path(args.input)

    # Trace the symlink all the way to the root file.
    if in_path.is_symlink():
        try:
            in_path = path.resolve(strict=True)
        except FileNotFoundError as fnfe:
            print(f"Failed to find the file at the end of the symlink for {in_path}.")
            exit(1)
        except RuntimeError as re:
            print(f"Infinite loop encountered along resolution path for {in_path}.")
            exit(1)

    # Make sure we have a file or directory.
    assert (
        in_path.is_file() or in_path.is_dir()
    ), "Provided input path is not a file or directory."

    if in_path.is_file():
        return find_in_file(in_path, args)
    elif in_path.is_dir():
        return find_in_directory(in_path, args)
    else:
        raise RuntimeError("Provided path format could not be understood.")


def is_regex(pattern: str) -> bool:
    # Regex specific characters
    regex_chars = r".*+?^${}()|[]\\"

    # Check if the pattern contains any regex-specific characters
    return any(char in pattern for char in regex_chars)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        add_help=True, description="A flexible find command."
    )
    parser.add_argument(
        "query",
        default="*",
        nargs="?",
        help="The query to perform over the files (regex supported).",
    )
    parser.add_argument(
        "--input",
        default=".",
        help="The directory or file to search within.",
    )
    parser.add_argument(
        "-d", "--depth", default=10, help="The depth to search to.", type=int
    )
    parser.add_argument(
        "-c",
        "--case-sensitive",
        action="store_true",
        help="Perform a case-sensitive match.",
    )
    parser.add_argument(
        "-I",
        "--ignore-gitignore",
        action="store_true",
        help="Whether to ignore .gitignore'd files.",
    )
    parser.add_argument(
        "-H",
        "--show-hidden",
        action="store_true",
        help="Whether to show files and folders that start with '.'",
    )
    parser.add_argument(
        "-F",
        "--full-path",
        action="store_true",
        help="Whether to display the full path.",
    )
    args = parser.parse_args()

    if not is_regex(args.query):
        args.query = f"*{args.query}*"

    print("".join(find(args)), end="")
